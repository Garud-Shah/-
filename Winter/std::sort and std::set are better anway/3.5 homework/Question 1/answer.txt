Sorting is the process of taking a list and putting it in some order that can be verified
to be correct in O(n) time. There are many ways to do this as we discussed in class. The 
importance lies in the final properties of sorting being very useful for other algorithims
- sometimes being the only way to reduce a O(n) factor to a O(log n) factor in a time complexity
which is a MASSIVE difference. 

This makes sorting very important - and its speed is also very important by the same principle 
as before since the other algorithims (like binary search) have about q ~ n queries. If an 
sorting algorithim has O(n^2) time complexity, it might be useless. This is why it is so 
important that sorting algorithims are O(n log n). 

In conclusion, sorting algorithims are very important. 
If they are O(n log n), not >= O(n^2), they can also be very useful in reducing time complexity.
This can sometimes be the only way to speed things up. 

Precomputation is an important process which governs many algorithims uses, including sorting.
This is the same process as other semmingly unrelalted algorithims such as prefix sums and 
dynamic programming. Precomputation is a very important concept, and sorting could be seen as
a way to use this concept.